# 3i [advanced]

# i3 config file (v4)

# Please see https://i3wm.org/docs/userguide.html for a complete reference.
# It is very well written and interesting to read.

# This configuration has been organized using vim fold markers.
# If you are in vim you can "set foldmethod=marker" to use the folding method here.
# Use zc to close a fold and zo to open a fold.

# We can and should use variables in the configuration to make it easy to update.

# First set the primary modifier key to be used.
# Mod1 is alt and Mod4 is the Windows key.
# I recommend Mod4 if you use Emacs because alt (meta) may cause conflicts.
set $mod Mod4

# {{{ fonts
# --------------------------------------------------------------------------------------
# Font for window titles. 
# Will also be used by the bar unless a different font is used in the bar {} block below.
# The number represents the font size.
# font pango:monospace 8

# This alternative font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
# Just enabling this here won't make your system look decent.
# Remember you'll have to configure the font in your terminal emulator separately from
# your i3 config.
font pango:DejaVu Sans Mono 8
# --------------------------------------------------------------------------------------
# }}}

# {{{ colors
# --------------------------------------------------------------------------------------
# Pull colors from Xresources
# The hex color code is a fallback in case the color cannot be pulled from Xresources.
# These are set to the gruvbox colorscheme by default as a fallback.
set_from_resource $bg          i3wm.color0   #282828
set_from_resource $red         i3wm.color1   #cc241d
set_from_resource $green       i3wm.color2   #98971a
set_from_resource $yellow      i3wm.color3   #d79921
set_from_resource $blue        i3wm.color4   #458588
set_from_resource $purple      i3wm.color5   #b16286
set_from_resource $aqua        i3wm.color6   #689d6a
set_from_resource $gray        i3wm.color7   #a89984
set_from_resource $altgray    i3wm.color8   #928374
set_from_resource $altred     i3wm.color9   #fb4934
set_from_resource $altgreen   i3wm.color10  #b8bb26
set_from_resource $altyellow  i3wm.color11  #fabd2f
set_from_resource $altblue    i3wm.color12  #83a598
set_from_resource $altpurple  i3wm.color13  #d3869b
set_from_resource $altaqua    i3wm.color14  #8ec07c
set_from_resource $fg          i3wm.color15  #ebdbb2

# The indicator color highlights the edge that a new client will appear if you select a
# particular orientation.
# Clients that you have not set an orientation will not highlight the border.

# class                   border   backgr.  text indicator  child_border
client.focused            $purple  $purple  $bg  $aqua      $purple
client.focused_inactive   $bg      $bg      $fg  $bg        $bg
client.unfocused          $bg      $bg      $fg  $bg        $bg
client.urgent             $green   $green   $bg  $altgreen  $green
client.placeholder        $bg      $gray    $bg  $bg        $bg

client.background         $bg
# --------------------------------------------------------------------------------------
# }}}

# {{{ bar
# --------------------------------------------------------------------------------------
# Start i3bar to display a workspace bar (plus the system information i3status finds out
# , if available)
bar {
	# This calls i3status which can display system information.
	# i3status can be configured (explained below in more detail)
        status_command i3status
	# i3bar uses same font as titlebars unless you specify a different font here.
	# This is helpful if you want the font size to differ.
	# font pango:monospace 8
	# You can change the symbol which separates the components of i3status
	separator_symbol "|"
	# You can also have the bar appear on the bottom
	position top
	# Make the bar only visible while pressing the modifier key
	mode dock
	hidden_state hide
	modifier $mod
	# The colors can be configured just like the rest of i3.
	# You can still use the color variables you defined previously to make
	# switching colorschemes much easier.
    	colors {
        	background   $bg
        	statusline   $fg
        	separator    $fg
#                                    border background text
        	focused_workspace    $bg    $purple    $bg
        	active_workspace     $gray  $bg        $gray
        	inactive_workspace   $gray  $bg        $gray
        	urgent_workspace     $bg    $purple    $bg
        	binding_mode         $bg    $green     $bg
   	}
}

# i3status configuration
# Make an i3status configuration file at ~/.config/i3status/config
# The configuration is highly modular and explained in detail on the man page.
# You can use the i3status configuration in the 3i repository as a minimal template.
# --------------------------------------------------------------------------------------
# }}}

# {{{ modes
# --------------------------------------------------------------------------------------
# i3 is fundamentally a modal window manager.
# We spend the majority of our time in default mode but other modes can be used to make
# many tasks easier.
# Modes also allow us to reduce the number of keybindings we have to memorize.

# When we exit a mode, we want to return to default mode.
# We can define a variable for that:
set $mode_default mode "default"
# You may wonder why we have something so redundant.
# This is in case you want execute something else everytime you return to default mode.
# For example if you use the red-screen shell script to adjust gamma while you are in a
# mode, you will want to return the gamma to normal upon returning to default mode

# {{{2 default mode
# --------------------------------------------------------------------------------------
# {{{3 general keybindings
# --------------------------------------------------------------------------------------
# You can create general keybindings but I try to avoid having lots of bindings.
# Your focus should be on what you're doing in i3 instead of memorizing tons of chords.
# The keybindings that we do keep in default mode are the most commonly used actions.

# We can set the terminal we want to use to a variable.
# i3 installs with urxvt which I find sufficient for most use cases.
# If you prefer another terminal emulator, change it here.
set $term urxvt

# Note: The biggest challenge I faced with urxvt was copying and pasting.
# You can select with the mouse to copy and middle-click to paste.
# Urxvt can also be extended with perl scripts to suit your needs.
# Also note, you can  change the appearance of urxvt but I won't cover that here.
# The 3i configuration focuses on i3, i3status, dmenu, i3lock, and maybe dunst.

# start a terminal
bindsym $mod+Return exec $term

# bring up a floating calculator window running python
for_window [title="pycalc"] floating enable
bindsym $mod+Shift+c exec urxvt -title pycalc -e python3 -i -c 'from math import *'

# kill focused window
bindsym $mod+Shift+q kill

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# we want to hide the bar and only make it visible while pressing the mod key
# i.e. for improved focus
bindsym $mod+Shift+f bar mode toggle

# --------------------------------------------------------------------------------------
# }}}

# {{{3 program launcher
# --------------------------------------------------------------------------------------
# start i3-dmenu-desktop
# This is a wrapper around dmenu which only displays applications which can actually be
# launched from dmenu (have a .desktop file).
# I recommend reading its man page to understand its functionality.
# You can completely configure it like dmenu inside the --dmenu flag.
bindsym $mod+d exec --no-startup-id i3-dmenu-desktop --dmenu='dmenu \
								-i \
								-p 'launch' \
								-nb $bg \
								-sf $bg \
								-sb $purple \
								-nf $fg' 

# -i  >> list items case insensitive
# -p  >> prompt
# -nb >> normal background color
# -sf >> selected foreground color
# -sb >> selected background color
# -nf >> normal foreground color
# unused options
# -b  >> appear at bottom of screen
# -l NUM >> list items vertically with NUM lines

# Once again, you can use the color variables if you've defined them previously to keep
# the colors consistant

# dmenu can be configured much further if you are willing to dig into the source.
# Check out its webpage: http://tools.suckless.org/dmenu/

# If you prefer the standard dmenu
# bindsym $mod+d exec dmenu_run -i -p 'launch' -nb '#222222' -sf '#eeeeee' -sb '#005577' -nf '#bbbbbb''
# --------------------------------------------------------------------------------------
# }}}

# {{{3 window movement and organization
# --------------------------------------------------------------------------------------
# Define variables to be used for movement.
# I've changed the motion keybindings here to use vi keys instead of i3's defaults.
set $left h
set $down j
set $up k
set $right l

# change focus
bindsym $mod+$left  focus left
bindsym $mod+$down  focus down
bindsym $mod+$up    focus up
bindsym $mod+$right focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left  focus left
bindsym $mod+Down  focus down
bindsym $mod+Up    focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+$left  move left
bindsym $mod+Shift+$down  move down
bindsym $mod+Shift+$up    move up
bindsym $mod+Shift+$right move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left  move left
bindsym $mod+Shift+Down  move down
bindsym $mod+Shift+Up    move up
bindsym $mod+Shift+Right move right

# by default new windows will just have a border of 3 pixels
# but we can toggle the border with simple command
default_border pixel 3
bindsym $mod+b border toggle 3

# The split bindings determine where the next new client will open in the workspace.
# If you've set indicator in your colors, you will see this graphically.

# toggle split orientation
bindsym $mod+o split toggle

# If you don't have an indicator, I recommend using two individual keybindings:
# split in horizontal orientation
# bindsym $mod+b split h

# split in vertical orientation
# bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# we set the minimum and maximum floating size
# we leave the minimum size unconstrained
# you should set the maximum floating size to the size of your primary display
# minus your borders (and titles) or smaller to be safe
floating_minimum_size -1 x -1
floating_maximum_size 1000 x 600

# toggle sticky on floating window
bindsym $mod+s sticky toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+p focus parent

# focus the child container
bindsym $mod+c focus child
# --------------------------------------------------------------------------------------
# }}}

# {{{3 workspaces
# --------------------------------------------------------------------------------------
# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"

# switch to workspace
bindsym $mod+1 workspace $ws1
bindsym $mod+2 workspace $ws2
bindsym $mod+3 workspace $ws3
bindsym $mod+4 workspace $ws4
bindsym $mod+5 workspace $ws5
bindsym $mod+6 workspace $ws6
bindsym $mod+7 workspace $ws7
bindsym $mod+8 workspace $ws8
bindsym $mod+9 workspace $ws9
bindsym $mod+0 workspace $ws10

# pressing the same workspace button bounces back to the previous workspace
workspace_auto_back_and_forth yes

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8
bindsym $mod+Shift+9 move container to workspace $ws9
bindsym $mod+Shift+0 move container to workspace $ws10
# --------------------------------------------------------------------------------------
# }}}

# {{{3 scratchpad
# --------------------------------------------------------------------------------------
# The scratchpad is a hidden workspace which can contain any number of windows that
# can be summoned anywhere

# make the currently focused window a scratchpad
bindsym $mod+Shift+x move scratchpad

# show the first scratchpad window
bindsym $mod+x scratchpad show
# --------------------------------------------------------------------------------------
# }}}
# --------------------------------------------------------------------------------------
# }}}

# {{{2 resize mode
# --------------------------------------------------------------------------------------
# Note that you can also use the mouse in default mode for this.

# We can give the mode a complex name because the entire name will appear in the bar.
# This allows us to display all the mode specific keybindings for easy reference.
set $mode_resize "RESIZE [h] -width [l] +width [j] -height [k] +height"

mode $mode_resize { 
        # These bindings trigger as soon as you enter the resize mode.
        # Pressing h will shrink the window’s width.
        # Pressing l will grow the window’s width.
        # Pressing j will shrink the window’s height.
        # Pressing k will grow the window’s height.
        bindsym $left  resize shrink width 10 px or 10 ppt
        bindsym $up    resize grow height 10 px or 10 ppt
        bindsym $down  resize shrink height 10 px or 10 ppt
        bindsym $right resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or q or $mod+r
        bindsym Return $mode_default
        bindsym Escape $mode_default
	bindsym q      $mode_default
        bindsym $mod+r $mode_default
}

bindsym $mod+r mode $mode_resize
# --------------------------------------------------------------------------------------
# }}}

# {{{2 session manager mode
# --------------------------------------------------------------------------------------
# We can give the mode a complex name because the entire name will appear in the bar.
# This allows us to display all the mode specific keybindings for easy reference.
set $mode_session "[r]eload config re[s]tart session [e]xit i3"

mode $mode_session { 
        # These bindings trigger as soon as you enter the session mode. 
        # Pressing r will reload the configuration.
        # Pressing s will restart the i3 session inplace (preserve layout/session).
        # Pressing e will exit i3 (log out of your X session).
        bindsym r reload
        bindsym s restart
        bindsym e exec "i3-nagbar -t warning \
        -m 'Do you really want to exit i3? This will end your X session.'\
        -B 'Yes, exit i3' 'i3-msg exit'

        # back to normal: Enter or Escape or Shift+e or $mod+r
        bindsym Return $mode_default
        bindsym Escape $mode_default
	bindsym q      $mode_default
        bindsym $mod+Shift+e $mode_default
}

bindsym $mod+Shift+e mode $mode_session
# --------------------------------------------------------------------------------------
# }}}

# {{{2 layout mode
# --------------------------------------------------------------------------------------
set $mode_layout "[s]tacking [t]abbed s[p]lit"

mode $mode_layout { 
        # These bindings trigger as soon as you enter the layout mode.
        # This mode is different than the previous two because we need exit after any
        # input from the user.
        # We just tell it to run $mode_default after our command.
        bindsym s layout stacking; $mode_default
        bindsym t layout tabbed; $mode_default
        bindsym p layout toggle split; $mode_default

        # back to normal: Enter or Escape or q or $mod+y
        bindsym Return $mode_default
        bindsym Escape $mode_default
	bindsym q      $mode_default
        bindsym $mod+y $mode_default
}

bindsym $mod+y mode $mode_layout
# --------------------------------------------------------------------------------------
# }}}

# {{{2 mark mode
# --------------------------------------------------------------------------------------
# We can mark windows and jump to them or swap them with others:
set $mode_mark "[m]ark [r]ecall [s]ummon s[w]ap"

mode $mode_mark {
	# These bindings trigger as soon as you enter the mark mode.
	# This mode always exits and then calls the i3-input which actually handles the rest.
	# mark window
	bindsym m $mode_default; exec i3-input -F 'mark %s' -l 1 -P 'Mark: '
	# jump to mark
	bindsym r $mode_default; exec i3-input -F '[con_mark="%s"] focus' -l 1 -P 'Recall: '
	# move mark to current workspace
	bindsym s $mode_default; exec i3-input -F '[con_mark="%s"] move workspace current' -l 1 -P 'Summon: '
	# swap mark with current window
	bindsym w $mode_default; exec i3-input -F 'swap container with mark %s' -l 1 -P 'Swap: '
        
	# back to normal: Enter or Escape or q or $mod+y
        bindsym Return $mode_default
        bindsym Escape $mode_default
	bindsym q      $mode_default
        bindsym $mod+m $mode_default
}

bindsym $mod+m mode $mode_mark
# --------------------------------------------------------------------------------------
# }}}

# {{{2 volume mode
# --------------------------------------------------------------------------------------
# I use amixer and alsamixer to control my audio.
# This commands are set with that in mind but it should not be hard to modify them for
# your setup.
# If you keyboard has dedicated audio keys, you can bind them in default mode if you
# prefer.
# They would be something like this: XF86AudioRaiseVolume.

set $mode_volume "[j] -vol [k] +vol [m]ute mi[x]er"

mode $mode_volume { 
	bindsym j exec amixer -q set 'Master' 5%- unmute
	bindsym k exec amixer -q set 'Master' 5%+ unmute
	bindsym m exec amixer -q set 'Master' toggle; $mode_default
	bindsym x exec urxvt -e alsamixer; $mode_default

	# back to normal: Enter or Escape or y or $mod+r
	bindsym Return $mode_default
	bindsym Escape $mode_default
	bindsym q      $mode_default
	bindsym $mod+a $mode_default
}

bindsym $mod+a mode $mode_volume
# --------------------------------------------------------------------------------------
# }}}
# --------------------------------------------------------------------------------------
# }}}
