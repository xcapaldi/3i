#             _  
# _|_  ._  _  _) 
#  |_\/|_)(/_ _) 
#    / |  

# 3i: type 3

# i3 config file (v4)

# Please see https://i3wm.org/docs/userguide.html for a complete reference.
# It is very well written and interesting to read.

# This configuration has been organized using vim fold markers.
# If you are in vim you can "set foldmethod=marker" to use the folding method here.
# Use zc to close a fold and zo to open a fold.

# We can and should use variables in the configuration to make it easy to update.

# First set the primary modifier key to be used.
# Mod1 is alt and Mod4 is the Windows key.
# I recommend Mod4 if you use Emacs because alt (meta) may cause conflicts.
set $mod Mod4

# {{{ fonts
# --------------------------------------------------------------------------------------
# Font for window titles. 
# Will also be used by the bar unless a different font is used in the bar {} block below.
# The number represents the font size.
font pango:monospace 8

# This alternative font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
# font pango:DejaVu Sans Mono 8
# --------------------------------------------------------------------------------------
# }}}

# {{{ colors
# --------------------------------------------------------------------------------------
# Here are the default i3 colors which you can change to suit your tastes.
# The indicator color highlights the edge that a new client will appear if you select a
# particular orientation.
# Clients that you have not set an orientation will not highlight the border.

# You can pull your colors from Xresources so that i3 matches your colorscheme.
# set_from_resource $black i3wm.color0 #000000
# The hex color code is a fallback in case the color cannot be pulled from Xresources.
# Then you can use the $black variable in your configuration.

# class                   border    backgr.   text      indicator child_border
client.focused            #4c7899   #285577   #ffffff   #2e9ef4   #285577
client.focused_inactive   #333333   #5f676a   #ffffff   #484e50   #5f676a
client.unfocused          #333333   #222222   #888888   #292d2e   #222222
client.urgent             #2f343a   #900000   #ffffff   #900000   #900000
client.placeholder        #000000   #0c0c0c   #ffffff   #000000   #0c0c0c

client.background         #ffffff
# --------------------------------------------------------------------------------------
# }}}

# {{{ bar
# --------------------------------------------------------------------------------------
# Start i3bar to display a workspace bar (plus the system information i3status finds out
# , if available)
bar {
	# This calls i3status which can display system information.
	# i3status can be configured (explained below in more detail)
        status_command i3status
	# i3bar uses same font as titlebars unless you specify a different font here.
	# This is helpful if you want the font size to differ.
	 font pango:monospace 8
	# You can change the symbol which separates the components of i3status
	separator_symbol "|"
	# You can also have the bar appear at the top on the bottom
	position bottom
	# The colors can be configured just like the rest of i3.
	# You can still use the color variables you defined previously to make
	# switching colorschemes much easier.
    	colors {
        	background   #000000
        	statusline   #ffffff
        	separator    #666666

        	focused_workspace    #4c7899   #285577   #ffffff
        	active_workspace     #333333   #5f676a   #ffffff
        	inactive_workspace   #333333   #222222   #888888
        	urgent_workspace     #2f343a   #900000   #ffffff
        	binding_mode         #2f343a   #900000   #ffffff
   	}
}

# i3status configuration
# Make an i3status configuration file at ~/.config/i3status/config
# The configuration is highly modular and explained in detail on the man page.
# You can use the i3status configuration in the 3i repository as a minimal template.
# --------------------------------------------------------------------------------------
# }}}

# {{{ modes
# --------------------------------------------------------------------------------------
# i3 is fundamentally a modal window manager.
# We spend the majority of our time in default mode but other modes can be used to make
# many tasks easier.
# Modes also allow us to reduce the number of keybindings we have to memorize.

# When we exit a mode, we want to return to default mode.
# We can define a variable for that:
set $mode_default mode "default"
# You may wonder why we have something so redundant.
# This is in case you want execute something else everytime you return to default mode.
# For example if you use the red-screen shell script to adjust gamma while you are in a
# mode, you will want to return the gamma to normal upon returning to default mode

# {{{2 default mode
# --------------------------------------------------------------------------------------
# {{{3 general keybindings
# --------------------------------------------------------------------------------------
# You can create general keybindings but I try to avoid having lots of bindings.
# Your focus should be on what you're doing in i3 instead of memorizing tons of chords.
# The keybindings that we do keep in default mode are the most commonly used actions.

# We can set the terminal we want to use to a variable.
# i3 installs with urxvt which I find sufficient for most use cases.
# If you prefer another terminal emulator, change it here.
set $term urxvt

# Note: The biggest challenge I faced with urxvt was copying and pasting.
# You can select with the mouse to copy and middle-click to paste.
# Urxvt can also be extended with perl scripts to suit your needs.
# Also note, you can  change the appearance of urxvt but I won't cover that here.
# The 3i configuration focuses on i3, i3status, dmenu, i3lock, and maybe dunst.

# start a terminal
bindsym $mod+Return exec $term

# kill focused window
bindsym $mod+Shift+q kill

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod
# --------------------------------------------------------------------------------------
# }}}

# {{{3 program launcher
# --------------------------------------------------------------------------------------
# start i3-dmenu-desktop
# This is a wrapper around dmenu which only displays applications which can actually be
# launched from dmenu (have a .desktop file).
# I recommend reading its man page to understand its functionality.
# You can completely configure it like dmenu inside the --dmenu flag.
bindsym $mod+d exec --no-startup-id i3-dmenu-desktop --dmenu='dmenu \
								-i \
								-p 'launch' \
								-nb '#222222' \
								-sf '#eeeeee' \
								-sb '#005577' \
								-nf '#bbbbbb'' 

# -i  >> list items case insensitive
# -p  >> prompt
# -nb >> normal background color
# -sf >> selected foreground color
# -sb >> selected background color
# -nf >> normal foreground color
# unused options
# -b  >> appear at bottom of screen
# -l NUM >> list items vertically with NUM lines

# Once again, you can use the color variables if you've defined them previously to keep
# the colors consistant

# dmenu can be configured much further if you are willing to dig into the source.
# Check out its webpage: http://tools.suckless.org/dmenu/

# If you prefer the standard dmenu
# bindsym $mod+d exec dmenu_run -i -p 'launch' -nb '#222222' -sf '#eeeeee' -sb '#005577' -nf '#bbbbbb''
# --------------------------------------------------------------------------------------
# }}}

# {{{3 window movement and organization
# --------------------------------------------------------------------------------------
# Define variables to be used for movement.
# I've changed the motion keybindings here to use vi keys instead of i3's defaults.
set $left h
set $down j
set $up k
set $right l

# change focus
bindsym $mod+$left  focus left
bindsym $mod+$down  focus down
bindsym $mod+$up    focus up
bindsym $mod+$right focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left  focus left
bindsym $mod+Down  focus down
bindsym $mod+Up    focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+$left  move left
bindsym $mod+Shift+$down  move down
bindsym $mod+Shift+$up    move up
bindsym $mod+Shift+$right move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left  move left
bindsym $mod+Shift+Down  move down
bindsym $mod+Shift+Up    move up
bindsym $mod+Shift+Right move right

# The split bindings determine where the next new client will open in the workspace.
# If you've set indicator in your colors, you will see this graphically.

# toggle split orientation
bindsym $mod+t split toggle

# toggle between stacking/tabbed/horizontal split/vertical split
bindsym $mod+x layout toggle all

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+p focus parent

# focus the child container
bindsym $mod+c focus child
# --------------------------------------------------------------------------------------

# }}}

# {{{3 workspaces
# --------------------------------------------------------------------------------------
# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"

# switch to workspace
bindsym $mod+1 workspace $ws1
bindsym $mod+2 workspace $ws2
bindsym $mod+3 workspace $ws3
bindsym $mod+4 workspace $ws4
bindsym $mod+5 workspace $ws5
bindsym $mod+6 workspace $ws6
bindsym $mod+7 workspace $ws7
bindsym $mod+8 workspace $ws8
bindsym $mod+9 workspace $ws9
bindsym $mod+0 workspace $ws10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8
bindsym $mod+Shift+9 move container to workspace $ws9
bindsym $mod+Shift+0 move container to workspace $ws10
# --------------------------------------------------------------------------------------
# }}}
# --------------------------------------------------------------------------------------
# }}}

# {{{ resize mode
# --------------------------------------------------------------------------------------
# Note that you can also use the mouse in default mode for this.

# We can give the mode a complex name because the entire name will appear in the bar.
# This allows us to display all the mode specific keybindings for easy reference.
set $mode_resize "RESIZE [h] -width [l] +width [j] -height [k] +height"

mode $mode_resize { 
        # These bindings trigger as soon as you enter the resize mode.
        # Pressing h will shrink the window’s width.
        # Pressing l will grow the window’s width.
        # Pressing j will shrink the window’s height.
        # Pressing k will grow the window’s height.
        bindsym $left  resize shrink width 10 px or 10 ppt
        bindsym $up    resize grow height 10 px or 10 ppt
        bindsym $down  resize shrink height 10 px or 10 ppt
        bindsym $right resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or q or $mod+r
        bindsym Return $mode_default
        bindsym Escape $mode_default
	bindsym q      $mode_default
        bindsym $mod+r $mode_default
}

bindsym $mod+r mode $mode_resize
# --------------------------------------------------------------------------------------
# }}}

# {{{ session manager mode
# --------------------------------------------------------------------------------------
# We can give the mode a complex name because the entire name will appear in the bar.
# This allows us to display all the mode specific keybindings for easy reference.
set $mode_session "[r]eload config re[s]tart session [e]xit i3"

mode $mode_session { 
        # These bindings trigger as soon as you enter the session mode. 
        # Pressing r will reload the configuration.
        # Pressing s will restart the i3 session inplace (preserve layout/session).
        # Pressing e will exit i3 (log out of your X session).
        bindsym r reload
        bindsym s restart
        bindsym e exec "i3-nagbar -t warning \
        -m 'Do you really want to exit i3? This will end your X session.'\
        -B 'Yes, exit i3' 'i3-msg exit'

        # back to normal: Enter or Escape or Shift+e or $mod+r
        bindsym Return $mode_default
        bindsym Escape $mode_default
	bindsym q      $mode_default
        bindsym $mod+Shift+e $mode_default
}

bindsym $mod+Shift+e mode $mode_session
# --------------------------------------------------------------------------------------
# }}}

# --------------------------------------------------------------------------------------
# }}}
